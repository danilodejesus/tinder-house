{"version":3,"sources":["examples/Advanced.js","examples/Simple.js","App.js","serviceWorker.js","index.js"],"names":["db","name","address","url","Advanced","useState","length","currentIndex","setCurrentIndex","lastDirection","setLastDirection","currentIndexRef","useRef","childRefs","useMemo","Array","fill","map","i","React","createRef","updateCurrentIndex","val","current","canGoBack","canSwipe","swipe","dir","a","goBack","newIndex","restoreCard","href","rel","className","character","index","ref","key","onSwipe","direction","nameToDelete","swiped","onCardLeftScreen","idx","console","log","style","backgroundImage","backgroundColor","onClick","Simple","characters","App","showAdvanced","setShowAdvanced","color","checked","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cb52fa6.chunk.js","sourcesContent":["import React, { useState, useMemo, useRef } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: '2 rm. · Apartment · 75 m² 13.500 kr.',\n    address: 'Ben Websters Vej, 2450 København, København SV - 2nd floor',\n    url: 'https://www.compass.com/m/36390540b870260d305e46f1a9bdaa68fd4d2051_img_0_eb16d/640x480.jpg'\n  },\n  {\n    name: '5 room townhouse of 145 m² 18.500 kr.',\n    address: 'Christiansholms Vænge, 2930 København, Klampenborg - Ground floor',\n    url: 'https://photos.zillowstatic.com/fp/d13c4f130d801d65b6ec772dbfc5b443-p_e.jpg'\n  },\n  {\n    name: '3 room apartment of 131 m² 26.500 kr.',\n    address: 'Ben Websters Vej, 2450 København, København SV - 2nd floor',\n    url: 'https://imganuncios.mitula.net/7116_208a_street_langley_bc_v2y_1t3_3_bedroom_house_for_rent_for_3500_month_7990067668261295485.jpg'\n  },\n]\n\nfunction Advanced () {\n  const [currentIndex, setCurrentIndex] = useState(db.length - 1)\n  const [lastDirection, setLastDirection] = useState()\n  // used for outOfFrame closure\n  const currentIndexRef = useRef(currentIndex)\n\n  const childRefs = useMemo(\n    () =>\n      Array(db.length)\n        .fill(0)\n        .map((i) => React.createRef()),\n    []\n  )\n\n  const updateCurrentIndex = (val) => {\n    setCurrentIndex(val)\n    currentIndexRef.current = val\n  }\n\n  const canGoBack = currentIndex < db.length - 1\n\n  const canSwipe = currentIndex >= 0\n\n  // set last direction and decrease current index\n  const swiped = (direction, nameToDelete, index) => {\n    setLastDirection(direction)\n    updateCurrentIndex(index - 1)\n  }\n\n  const outOfFrame = (name, idx) => {\n    console.log(`${name} (${idx}) left the screen!`, currentIndexRef.current)\n    // handle the case in which go back is pressed before card goes outOfFrame\n    currentIndexRef.current >= idx && childRefs[idx].current.restoreCard()\n    // TODO: when quickly swipe and restore multiple times the same card,\n    // it happens multiple outOfFrame events are queued and the card disappear\n    // during latest swipes. Only the last outOfFrame event should be considered valid\n  }\n\n  const swipe = async (dir) => {\n    if (canSwipe && currentIndex < db.length) {\n      await childRefs[currentIndex].current.swipe(dir) // Swipe the card!\n    }\n  }\n\n  // increase current index and show card\n  const goBack = async () => {\n    if (!canGoBack) return\n    const newIndex = currentIndex + 1\n    updateCurrentIndex(newIndex)\n    await childRefs[newIndex].current.restoreCard()\n  }\n\n  return (\n    <div>\n      <link\n        href='https://fonts.googleapis.com/css?family=Damion&display=swap'\n        rel='stylesheet'\n      />\n      <link\n        href='https://fonts.googleapis.com/css?family=Alatsi&display=swap'\n        rel='stylesheet'\n      />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {db.map((character, index) => (\n          <TinderCard\n            ref={childRefs[index]}\n            className='swipe'\n            key={character.name}\n            onSwipe={(dir) => swiped(dir, character.name, index)}\n            onCardLeftScreen={() => outOfFrame(character.name, index)}\n          >\n            <div\n              style={{ backgroundImage: 'url(' + character.url + ')' }}\n              className='card'\n            >\n              <h3>{character.name}</h3>\n              <p>{character.address}</p>\n            </div>\n          </TinderCard>\n        ))}\n      </div>\n      <div className='buttons'>\n        <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('left')}>Swipe left!</button>\n        <button style={{ backgroundColor: !canGoBack && '#c3c4d3' }} onClick={() => goBack()}>Undo swipe!</button>\n        <button style={{ backgroundColor: !canSwipe && '#c3c4d3' }} onClick={() => swipe('right')}>Swipe right!</button>\n      </div>\n      {lastDirection ? (\n        <h2 key={lastDirection} className='infoText'>\n          You swiped {lastDirection}\n        </h2>\n      ) : (\n        <h2 className='infoText'>\n          Swipe a card or press a button to get Restore Card button visible!\n        </h2>\n      )}\n    </div>\n  )\n}\n\nexport default Advanced\n","import React, { useState } from 'react'\n// import TinderCard from '../react-tinder-card/index'\nimport TinderCard from 'react-tinder-card'\n\nconst db = [\n  {\n    name: '2 rm. · Apartment · 75 m² 13.500 kr.',\n    address: 'Ben Websters Vej, 2450 København, København SV - 2nd floor',\n    url: 'https://d1af89beukha9h.cloudfront.net/wp-content/uploads/2018/12/Online-House-Rental-Sites.jpg'\n  },\n  {\n    name: '5 room townhouse of 145 m² 18.500 kr.',\n    address: 'Christiansholms Vænge, 2930 København, Klampenborg - Ground floor',\n    url: 'https://resihome.com/hs-fs/hubfs/%5Bimage%5D%20resihome%20renter%20couple-1.jpg?width=1200&height=800&name=%5Bimage%5D%20resihome%20renter%20couple-1.jpg'\n  },\n  {\n    name: '3 room apartment of 131 m² 26.500 kr.',\n    address: 'Ben Websters Vej, 2450 København, København SV - 2nd floor',\n    url: 'https://www.zillowstatic.com/bedrock/app/uploads/sites/42/renting-a-house-with-a-pool-fa1550.jpg'\n  },\n]\n\nfunction Simple () {\n  const characters = db\n  const [lastDirection, setLastDirection] = useState()\n\n  const swiped = (direction, nameToDelete) => {\n    console.log('removing: ' + nameToDelete)\n    setLastDirection(direction)\n  }\n\n  const outOfFrame = (name) => {\n    console.log(name + ' left the screen!')\n  }\n\n  return (\n    <div>\n      <link href='https://fonts.googleapis.com/css?family=Damion&display=swap' rel='stylesheet' />\n      <link href='https://fonts.googleapis.com/css?family=Alatsi&display=swap' rel='stylesheet' />\n      <h1>React Tinder Card</h1>\n      <div className='cardContainer'>\n        {characters.map((character) =>\n          <TinderCard className='swipe' key={character.name} onSwipe={(dir) => swiped(dir, character.name)} onCardLeftScreen={() => outOfFrame(character.name)}>\n            <div style={{ backgroundImage: 'url(' + character.url + ')' }} className='card'>\n              <h3>{character.name}</h3>\n              <p>{character.address}</p>\n            </div>\n          </TinderCard>\n        )}\n      </div>\n      {lastDirection ? <h2 className='infoText'>You swiped {lastDirection}</h2> : <h2 className='infoText' />}\n    </div>\n  )\n}\n\nexport default Simple\n","import React, { useState } from 'react'\nimport './App.css'\nimport Switch from 'react-ios-switch'\n\nimport Advanced from './examples/Advanced'\nimport Simple from './examples/Simple'\n\nfunction App () {\n  const [showAdvanced, setShowAdvanced] = useState(false)\n\n  return (\n    <div className='app'>\n      {showAdvanced ? <Advanced /> : <Simple />}\n      <div className='row'>\n        <p style={{ color: '#fff' }}>Show advanced example</p> <Switch checked={showAdvanced} onChange={setShowAdvanced} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}